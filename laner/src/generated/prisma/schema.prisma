generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model sqlx_migrations {
  version        BigInt   @id
  description    String
  installed_on   DateTime @default(now()) @db.Timestamptz(6)
  success        Boolean
  checksum       Bytes
  execution_time BigInt

  @@map("_sqlx_migrations")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model api_request_logs {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  endpoint         String   @db.VarChar(255)
  lst_symbol       String?  @db.VarChar(50)
  request_status   String   @db.VarChar(20)
  response_time_ms Int?
  error_message    String?
  retry_count      Int?     @default(0)
  created_at       DateTime @default(now()) @db.Timestamptz(6)

  @@index([created_at], map: "idx_api_request_logs_created_at")
  @@index([request_status], map: "idx_api_request_logs_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model deposits {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String   @db.Uuid
  amount_sol   Decimal  @db.Decimal
  type         String
  source_chain String
  tx_hash      String
  deposited_at DateTime @default(now()) @db.Timestamptz(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deposited_at], map: "idx_deposits_deposited_at")
  @@index([source_chain], map: "idx_deposits_source_chain")
  @@index([type], map: "idx_deposits_type")
  @@index([user_id], map: "idx_deposits_user_id")
}

model epoch_snapshots {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  epoch          Int              @unique
  snapshot_time  DateTime         @default(now()) @db.Timestamptz(6)
  lst_strategy   lst_strategy?
  user_snapshots user_snapshots[]

  @@index([epoch], map: "idx_epoch_snapshots_epoch")
  @@index([snapshot_time], map: "idx_epoch_snapshots_snapshot_time")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model lst_apy_data {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lst_symbol   String   @db.VarChar(50)
  apy_type     String   @db.VarChar(20)
  apy_value    Decimal  @db.Decimal(10, 6)
  collected_at DateTime @default(now()) @db.Timestamptz(6)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  @@unique([lst_symbol, apy_type], map: "lst_apy_data_unique_symbol_type")
  @@index([collected_at], map: "idx_lst_apy_data_collected_at")
  @@index([lst_symbol, apy_type], map: "idx_lst_apy_data_symbol_type")
}

model lst_holder_data {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lst_symbol    String   @db.VarChar(50)
  total_holders BigInt
  total_supply  Decimal  @db.Decimal(20, 9)
  collected_at  DateTime @default(now()) @db.Timestamptz(6)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  @@unique([lst_symbol, collected_at])
  @@index([collected_at], map: "idx_lst_holder_data_collected_at")
  @@index([lst_symbol], map: "idx_lst_holder_data_symbol")
}

model lst_strategy {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  epoch_snapshot_id String          @unique @db.Uuid
  chosen_lst        String
  decided_at        DateTime        @default(now()) @db.Timestamptz(6)
  epoch_snapshots   epoch_snapshots @relation(fields: [epoch_snapshot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chosen_lst], map: "idx_lst_strategy_chosen_lst")
  @@index([epoch_snapshot_id], map: "idx_lst_strategy_epoch_snapshot_id")
}

model lst_tokens {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  symbol       String   @unique @db.VarChar(50)
  mint_address String   @unique @db.VarChar(255)
  name         String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
}

model lst_tvl_data {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lst_symbol   String   @db.VarChar(50)
  tvl_value    Decimal  @db.Decimal(20, 2)
  collected_at DateTime @default(now()) @db.Timestamptz(6)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  @@unique([lst_symbol, collected_at])
  @@index([collected_at], map: "idx_lst_tvl_data_collected_at")
  @@index([lst_symbol], map: "idx_lst_tvl_data_symbol")
}

model user_snapshots {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String          @db.Uuid
  epoch_snapshot_id String          @db.Uuid
  current_position  String
  sol_value         Decimal         @db.Decimal
  epoch_snapshots   epoch_snapshots @relation(fields: [epoch_snapshot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, epoch_snapshot_id])
  @@index([epoch_snapshot_id], map: "idx_user_snapshots_epoch_snapshot_id")
  @@index([user_id], map: "idx_user_snapshots_user_id")
}

model users {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  privy_id       String?          @unique
  deposits       deposits[]
  user_snapshots user_snapshots[]
  withdrawals    withdrawals[]

  @@index([privy_id], map: "idx_users_privy_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model withdrawals {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String   @db.Uuid
  amount_sol        Decimal  @db.Decimal
  type              String
  destination_chain String
  tx_hash           String?
  withdrawn_at      DateTime @default(now()) @db.Timestamptz(6)
  users             users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([destination_chain], map: "idx_withdrawals_destination_chain")
  @@index([type], map: "idx_withdrawals_type")
  @@index([user_id], map: "idx_withdrawals_user_id")
  @@index([withdrawn_at], map: "idx_withdrawals_withdrawn_at")
}
